package oops.polymorphism.ctp.method_hiding;

/*

    Exercise 3: Method Hiding vs Overriding
                Create class Parent with a static void display() method.
                Create class Child that defines static void display() with different message.

                In main, do:
                    Parent p = new Child();
                    p.display();

                üëâ Observe output and compare with overriding.

*/

class Parent {
    static void display() {
        System.out.println("Hello Display");
    }
}

class Child extends Parent{
    static void display() {
        System.out.println("Hello Different display");
    }
}

public class Program_01 {
    public static void main(String[] args) {
        Parent p = new Child();
        p.display();

/*        ‡§Ø‡•á ‡§µ‡§æ‡§≤‡§æ example ‡§§‡•Å‡§Æ‡§®‡•á ‡§∏‡§π‡•Ä ‡§≤‡§ø‡§ñ‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§á‡§∏‡§Æ‡•á‡§Ç runtime polymorphism ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∞‡§π‡§æ‡•§
        üëâ Reason:
        static methods inherit ‡§§‡•ã ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® override ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•á‡•§
        ‡§ú‡§¨ Child class ‡§≠‡•Ä static display() ‡§≤‡§ø‡§ñ‡§§‡•Ä ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡•á method overriding ‡§®‡§π‡•Ä‡§Ç,
        ‡§¨‡§≤‡•ç‡§ï‡§ø method hiding ‡§ï‡§π‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
        Compile time ‡§™‡§∞ ‡§π‡•Ä decide ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ï‡•å‡§® ‡§∏‡§æ method call ‡§π‡•ã‡§ó‡§æ, reference type ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á‡•§
*/
    }
}
